<!--
  Pagina Dashboard per la gestione degli sheet - Versione Modulare
  Utilizza componenti separati per una migliore manutenibilit√†
  
  @version 1.0.0 - Modular Architecture
-->
<template>
  <div class="sheets-dashboard">
    <!-- Header della pagina -->
    <SheetsPageHeader 
      :loading="loading"
      @refresh="refreshData"
      @create="showCreateModal = true"
    />

    <!-- Cards statistiche -->
    <SheetsStatsCards 
      :sheets="allSheets"
      :total-count="sheetCount"
    />

    <!-- Filtri e ricerca -->
    <SheetsSearchFilters 
      v-model:search-code="searchCode"
      v-model:search-name="searchName"
      v-model:selected-format="selectedFormat"
      v-model:selected-drawing="selectedDrawing"
      :available-formats="availableFormats"
      :loading="loading"
      @search="performSearchByCode"
      @search-by-name="performSearchByName"
      @filters-changed="applyFilters"
      @clear-filters="clearFilters"
    />

    <!-- Tabella sheet -->
    <SheetsTable 
      :sheets="paginatedSheets"
      :loading="loading"
      :error="error"
      :current-page="currentPage"
      :total-pages="totalPages"
      :visible-pages="visiblePages"
      @view="viewSheet"
      @edit="editSheet"
      @delete="confirmDelete"
      @retry="loadSheets"
      @create-first="showCreateModal = true"
      @change-page="changePage"
    />

    <!-- Modal per creazione/modifica sheet -->
    <SheetFormModal 
      :show="showCreateModal"
      :editing-sheet="editingSheet"
      v-model:form-data="formData"
      :errors="formErrors"
      :available-formats="availableFormats"
      :available-format-objects="availableFormatObjects"
      :available-drawings="availableDrawings"
      :available-models="availableModels"
      :saving="saving"
      @close="closeModal"
      @save="saveSheet"
    />

    <!-- Modal per visualizzazione JSON -->
    <SheetViewModal 
      :show="showViewModal"
      :sheet="viewingSheet"
      @close="closeViewModal"
      @copy="copySheetJson"
      @download="downloadSheetJson"
    />

    <!-- Debug Panel with connection test -->
    <div v-if="isDebugMode" class="mt-4">
      <div class="card border-warning">
        <div class="card-header bg-warning bg-opacity-10">
          <div class="d-flex justify-content-between align-items-center">
            <span>
              <i class="bi bi-bug me-2"></i>
              Debug Panel - Sheets
            </span>
            <div class="btn-group btn-group-sm">
              <button class="btn btn-outline-primary" @click="testBackend" :disabled="loading">
                <i class="bi bi-wifi"></i> Test Backend
              </button>
              <button class="btn btn-outline-success" @click="forceLogin" :disabled="loading">
                <i class="bi bi-key"></i> Force Login
              </button>
              <button class="btn btn-outline-info" @click="showDebugPanel = !showDebugPanel">
                <i :class="['bi', showDebugPanel ? 'bi-chevron-up' : 'bi-chevron-down']"></i>
              </button>
            </div>
          </div>
        </div>
        <div class="card-body">
          <div class="row small">
            <div class="col-md-6">
              <strong>Auth Status:</strong> 
              <span :class="isAuthenticated ? 'text-success' : 'text-danger'">
                {{ isAuthenticated ? 'Authenticated' : 'Not authenticated' }}
              </span><br>
              <strong>User:</strong> {{ user?.login || 'None' }}<br>
              <strong>Backend:</strong> <code>{{ useRuntimeConfig().public.apiBase }}</code><br>
              <strong>Sheets Count:</strong> {{ allSheets.length }}<br>
              <strong>Loading:</strong> {{ loading }}
            </div>
            <div class="col-md-6">
              <div v-if="error" class="text-danger">
                <strong>Error:</strong> {{ error }}
              </div>
              <div v-if="debugInfo" class="text-info">
                <strong>Last Test:</strong> {{ debugInfo }}
              </div>
            </div>
          </div>
        </div>
        <div v-show="showDebugPanel" class="card-body border-top p-0">
          <ApiDebugPanel />
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
// Import dei componenti modulari
import SheetsPageHeader from '~/components/Sheets/SheetsPageHeader.vue'
import SheetsStatsCards from '~/components/Sheets/SheetsStatsCards.vue'
import SheetsSearchFilters from '~/components/Sheets/SheetsSearchFilters.vue'
import SheetsTable from '~/components/Sheets/SheetsTable.vue'
import SheetFormModal from '~/components/Sheets/SheetFormModal.vue'
import SheetViewModal from '~/components/Sheets/SheetViewModal.vue'
import ApiDebugPanel from '~/components/Debug/ApiDebugPanel.vue'

// Import dei composables e tipi
import { useApi, type SheetWithRelations, type ApiResponse } from '~/composables/useApi'
import type { IModel } from '~/model/model.model'
import type { IFormat } from '~/model/format.model'
import { useI18n } from '~/composables/useI18n'
import { useAuth } from '~/composables/useAuth'
import { useDebug } from '~/composables/useDebug'
import { getAvailableFormats } from '~/utils/formats'
import { testBackendConnection } from '~/utils/testBackend'

const { t, loadNamespace } = useI18n()
const { isAuthenticated, user, login, getToken } = useAuth()

// Configurazione della pagina
definePageMeta({
  layout: 'dashboard',
  middleware: ['auth', 'i18n']
})

// Dati reattivi
const { sheets, models, formats } = useApi()
const allSheets = ref<SheetWithRelations[]>([])
const filteredSheets = ref<SheetWithRelations[]>([])
const sheetCount = ref<number | null>(null)
const loading = ref(false)
const error = ref<string | null>(null)
const isInitialized = ref(false)

// Filtri e ricerca
const searchCode = ref('')
const searchName = ref('')
const selectedFormat = ref('')
const selectedDrawing = ref('')
const availableFormats = ref<string[]>([])
const availableFormatObjects = ref<IFormat[]>([])  // Full format objects
const availableDrawings = ref<IModel[]>([])
const availableModels = ref<IModel[]>([])  // Per PART/ASSEMBLY

// Paginazione
const currentPage = ref(1)
const itemsPerPage = 20

// Modal e form
const showCreateModal = ref(false)
const showViewModal = ref(false)
const viewingSheet = ref<SheetWithRelations | null>(null)
const editingSheet = ref<SheetWithRelations | null>(null)
const saving = ref(false)
const formData = ref({
  code: '',
  name: '',
  formatType: '',
  creoId: '',
  drawingId: '',
  modelIds: [] as string[],
  balloon: ''
})
const formErrors = ref<Record<string, string>>({})

// Debug panel
const { isDebugMode } = useDebug()
const showDebugPanel = ref(false)
const debugInfo = ref<string>('')

// Computed properties
const paginatedSheets = computed(() => {
  const start = (currentPage.value - 1) * itemsPerPage
  const end = start + itemsPerPage
  return filteredSheets.value.slice(start, end)
})

const totalPages = computed(() => {
  return Math.ceil(filteredSheets.value.length / itemsPerPage)
})

const visiblePages = computed(() => {
  const pages = []
  const start = Math.max(1, currentPage.value - 2)
  const end = Math.min(totalPages.value, currentPage.value + 2)
  
  for (let i = start; i <= end; i++) {
    pages.push(i)
  }
  return pages
})

// Metodi per il caricamento dati
const refreshData = async (): Promise<void> => {
  console.log('[Sheets] Refresh data requested')
  searchCode.value = ''
  searchName.value = ''
  selectedFormat.value = ''
  selectedDrawing.value = ''
  currentPage.value = 1
  
  await loadModelsAndFormats()
  await loadSheets()
}

const loadSheets = async (): Promise<void> => {
  // Prevent multiple simultaneous calls
  if (loading.value) {
    console.log('[Sheets] ‚ö†Ô∏è Already loading, skipping...')
    return
  }
  
  console.log('[Sheets] üîÑ Starting sheet loading...', new Date().toLocaleTimeString())
  console.trace('[Sheets] loadSheets called from:')
  loading.value = true
  error.value = null
  
  try {
    // Quick auth check using already available variable
    if (!isAuthenticated.value) {
      console.error('[Sheets] User not authenticated')
      error.value = 'Authentication required'
      await navigateTo('/login')
      return
    }
    
    // Simple direct API call without complex timeout logic
    console.log('[Sheets] Calling sheets.getAll()...')
    const sheetsResponse = await sheets.getAll()
    
    if (sheetsResponse.success) {
      // Success: update data
      allSheets.value = sheetsResponse.data || []
      console.log('[Sheets] ‚úÖ Loaded sheets:', allSheets.value.length)
      
      // Simple count - don't complicate with separate API call
      sheetCount.value = allSheets.value.length
      
      // Apply filters once
      extractAvailableFormats()
      applyFilters()
      
    } else {
      // Error: show appropriate message
      console.error('[Sheets] ‚ùå API Error:', sheetsResponse.error)
      
      if (sheetsResponse.status === 401) {
        await navigateTo('/login')
        return
      }
      
      error.value = sheetsResponse.error || 'Failed to load sheets'
      allSheets.value = []
      sheetCount.value = 0
      extractAvailableFormats()
      applyFilters()
    }
    
  } catch (err) {
    console.error('[Sheets] ‚ùå Exception:', err)
    error.value = 'Connection error'
    allSheets.value = []
    sheetCount.value = 0
    extractAvailableFormats()
    applyFilters()
    
  } finally {
    loading.value = false
  }
}

const loadModelsAndFormats = async (): Promise<void> => {
  try {
    console.log('[Sheets] Loading models and formats...')
    
    // Load models (DRAWING, PART, ASSEMBLY)
    const modelsResponse = await models.getAll()
    if (modelsResponse.success) {
      const allModels = modelsResponse.data || []
      availableDrawings.value = allModels.filter(model => model.modelType === 'DRAWING')
      availableModels.value = allModels.filter(model => 
        model.modelType === 'PART' || model.modelType === 'ASSEMBLY'
      )
      console.log('[Sheets] Loaded models:', {
        drawings: availableDrawings.value.length,
        partsAssemblies: availableModels.value.length
      })
    } else {
      console.error('[Sheets] Failed to load models:', modelsResponse.error)
    }
    
    // Load formats
    const formatsResponse = await formats.getAll()
    if (formatsResponse.success) {
      availableFormatObjects.value = formatsResponse.data || []
      console.log('[Sheets] Loaded formats:', availableFormatObjects.value.length)
    } else {
      console.error('[Sheets] Failed to load formats:', formatsResponse.error)
    }
    
  } catch (err) {
    console.error('[Sheets] Error loading models and formats:', err)
  }
}

const extractAvailableFormats = (): void => {
  try {
    const existingFormats = allSheets.value
      .map(sheet => sheet.formatType)
      .filter(format => format != null) as string[]
    
    const newFormats = getAvailableFormats(existingFormats)
    
    // Only update if different to avoid loops
    if (JSON.stringify(availableFormats.value) !== JSON.stringify(newFormats)) {
      availableFormats.value = newFormats
      console.log('[Sheets] Updated available formats:', availableFormats.value)
    }
  } catch (err) {
    console.error('[Sheets] Error extracting formats:', err)
  }
}

// Metodi per i filtri
const applyFilters = (): void => {
  try {
    let filtered = [...allSheets.value]
    
    if (selectedFormat.value) {
      filtered = filtered.filter(sheet => sheet.formatType === selectedFormat.value)
    }
    
    if (selectedDrawing.value) {
      if (selectedDrawing.value === 'WITH_DRAWING') {
        filtered = filtered.filter(sheet => sheet.drawing)
      } else if (selectedDrawing.value === 'WITHOUT_DRAWING') {
        filtered = filtered.filter(sheet => !sheet.drawing)
      }
    }
    
    // Only update if different to avoid unnecessary re-renders
    if (JSON.stringify(filteredSheets.value) !== JSON.stringify(filtered)) {
      filteredSheets.value = filtered
      currentPage.value = 1
      console.log('[Sheets] Applied filters, result count:', filtered.length)
    }
  } catch (err) {
    console.error('[Sheets] Error applying filters:', err)
  }
}

const performSearchByCode = async (): Promise<void> => {
  if (!searchCode.value.trim()) {
    applyFilters()
    return
  }
  
  loading.value = true
  try {
    const response = await sheets.searchByCode(searchCode.value.trim())
    if (response.success) {
      allSheets.value = response.data || []
      extractAvailableFormats()
      applyFilters()
    } else {
      error.value = response.error || 'Errore nella ricerca per codice'
    }
  } catch (err) {
    error.value = err instanceof Error ? err.message : 'Errore nella ricerca per codice'
  } finally {
    loading.value = false
  }
}

const performSearchByName = async (): Promise<void> => {
  if (!searchName.value.trim()) {
    applyFilters()
    return
  }
  
  loading.value = true
  try {
    const response = await sheets.searchByName(searchName.value.trim())
    if (response.success) {
      allSheets.value = response.data || []
      extractAvailableFormats()
      applyFilters()
    } else {
      error.value = response.error || 'Errore nella ricerca per nome'
    }
  } catch (err) {
    error.value = err instanceof Error ? err.message : 'Errore nella ricerca per nome'
  } finally {
    loading.value = false
  }
}

const clearFilters = (): void => {
  searchCode.value = ''
  searchName.value = ''
  selectedFormat.value = ''
  selectedDrawing.value = ''
  loadSheets()
}

// Metodi per la paginazione
const changePage = (page: number): void => {
  if (page >= 1 && page <= totalPages.value) {
    currentPage.value = page
  }
}

// Metodi per il modal e CRUD
const closeModal = (): void => {
  showCreateModal.value = false
  editingSheet.value = null
  resetForm()
}

const resetForm = (): void => {
  formData.value = {
    code: '',
    name: '',
    formatType: '',
    creoId: '',
    drawingId: '',
    modelIds: [],
    formatId: ''
  }
  formErrors.value = {}
}

const validateForm = (): boolean => {
  formErrors.value = {}
  
  if (!formData.value.code.trim()) {
    formErrors.value.code = t('sheets:validation.codeRequired')
  }
  
  if (!formData.value.name.trim()) {
    formErrors.value.name = t('sheets:validation.nameRequired')
  }
  
  if (!formData.value.formatType) {
    formErrors.value.formatType = t('sheets:validation.formatRequired')
  }
  
  return Object.keys(formErrors.value).length === 0
}


const saveSheet = async (): Promise<void> => {
  console.log('[Sheets] Save sheet started')
  
  if (!validateForm()) {
    console.log('[Sheets] Validation failed')
    return
  }
  
  saving.value = true
  
  try {
    // Prepara i dati del sheet usando la nuova struttura integrata
    const sheetData: any = {
      code: formData.value.code,
      name: formData.value.name,
      formatType: formData.value.formatType,
      creoId: formData.value.creoId || null
    }
    
    // Gestione del formato - cerca l'oggetto formato completo se disponibile
    if (formData.value.formatType && availableFormatObjects.value.length > 0) {
      const selectedFormat = availableFormatObjects.value.find(
        format => format.formatType === formData.value.formatType
      )
      if (selectedFormat) {
        sheetData.format = {
          id: selectedFormat.id,
          code: selectedFormat.code,
          name: selectedFormat.name,
          formatType: selectedFormat.formatType,
          dimX: selectedFormat.dimX,
          dimY: selectedFormat.dimY,
          creoId: selectedFormat.creoId,
          file: selectedFormat.file
        }
        console.log('[Sheets] Adding format object to sheet:', { id: selectedFormat.id, name: selectedFormat.name })
      }
    }
    
    // Gestione modelli associati (PART/ASSEMBLY) - invia oggetti completi
    console.log('[Sheets] Current formData.modelIds:', formData.value.modelIds)
    
    if (formData.value.modelIds.length > 0) {
      const selectedModels = formData.value.modelIds
        .map(id => availableModels.value.find(model => model.id?.toString() === id))
        .filter(Boolean)
        .map(model => ({
          id: model!.id,
          code: model!.code,
          name: model!.name,
          modelType: model!.modelType,
          instanceType: model!.instanceType,
          file: model!.file,
          version: model!.version,
          item: model!.item,
          generic: model!.generic,
          parent: model!.parent
          // NON includere sheets per evitare referenze circolari
        }))
      
      sheetData.models = selectedModels
      console.log('[Sheets] Adding models objects to sheet:', selectedModels.map(m => ({ id: m.id, name: m.name })))
    }
    
    // Gestione del campo drawing - invia oggetto completo
    if (formData.value.drawingId) {
      const selectedDrawing = availableDrawings.value.find(
        drawing => drawing.id?.toString() === formData.value.drawingId
      )
      
      if (selectedDrawing) {
        sheetData.drawing = {
          id: selectedDrawing.id,
          code: selectedDrawing.code,
          name: selectedDrawing.name,
          modelType: selectedDrawing.modelType,
          instanceType: selectedDrawing.instanceType,
          file: selectedDrawing.file,
          version: selectedDrawing.version,
          item: selectedDrawing.item,
          generic: selectedDrawing.generic,
          parent: selectedDrawing.parent
          // NON includere sheets per evitare referenze circolari
        }
        console.log('[Sheets] Adding drawing object to sheet:', { id: selectedDrawing.id, name: selectedDrawing.name })
      }
    }
    
    console.log('[Sheets] Final sheet data to send:', sheetData)
    console.log('[Sheets] JSON string of data to send:', JSON.stringify(sheetData, null, 2))
    
    let response: ApiResponse<SheetWithRelations>
    
    if (editingSheet.value) {
      console.log('[Sheets] Updating sheet with ID:', editingSheet.value.id)
      // Il backend vuole l'ID nel body oltre che nell'URL
      // Metti models e drawing PRIMA dell'id
      const updateData = {
        ...sheetData,
        id: editingSheet.value.id
      }
      console.log('[Sheets] Update payload (models first, then id):', updateData)
      response = await sheets.update(editingSheet.value.id!, updateData)
    } else {
      console.log('[Sheets] Creating new sheet:', sheetData)
      response = await sheets.create(sheetData)
    }
    
    if (response.success) {
      closeModal()
      console.log('[Sheets] Operazione completata, aggiornamento dati...')
      await loadSheets()
      
      const message = editingSheet.value 
        ? t('sheets:messages.updateSuccess')
        : t('sheets:messages.createSuccess')
      
      console.log('[Sheets] Success message:', message)
    } else {
      console.error('[Sheets] Save failed:', response.error)
      error.value = response.error || 'Errore nel salvataggio'
    }
  } catch (err) {
    console.error('[Sheets] Save exception:', err)
    error.value = err instanceof Error ? err.message : 'Errore nel salvataggio'
  } finally {
    saving.value = false
  }
}

const viewSheet = (sheet: SheetWithRelations): void => {
  console.log('[Sheets] View sheet clicked:', sheet)
  viewingSheet.value = sheet
  showViewModal.value = true
}

const closeViewModal = (): void => {
  showViewModal.value = false
  viewingSheet.value = null
}

const downloadSheetJson = (): void => {
  if (!viewingSheet.value) return
  
  const jsonData = JSON.stringify(viewingSheet.value, null, 2)
  const blob = new Blob([jsonData], { type: 'application/json' })
  const url = URL.createObjectURL(blob)
  const link = document.createElement('a')
  link.href = url
  link.download = `sheet-${viewingSheet.value.code}-${viewingSheet.value.id}.json`
  document.body.appendChild(link)
  link.click()
  document.body.removeChild(link)
  URL.revokeObjectURL(url)
  console.log('[Sheets] JSON file downloaded for sheet:', viewingSheet.value.code)
}

const copySheetJson = async (): Promise<void> => {
  if (!viewingSheet.value) return
  
  const jsonData = JSON.stringify(viewingSheet.value, null, 2)
  try {
    await navigator.clipboard.writeText(jsonData)
    console.log('[Sheets] JSON copied to clipboard for sheet:', viewingSheet.value.code)
  } catch (err) {
    console.error('[Sheets] Failed to copy JSON to clipboard:', err)
    const textarea = document.querySelector('#jsonContent') as HTMLTextAreaElement
    if (textarea) {
      textarea.select()
      document.execCommand('copy')
    }
  }
}

const editSheet = (sheet: SheetWithRelations): void => {
  console.log('[Sheets] Edit sheet:', sheet)
  editingSheet.value = sheet
  
  // Extract model IDs from the models array
  const modelIds = sheet.models?.map(model => model.id?.toString() || '').filter(id => id) || []
  
  // Extract drawing ID
  const drawingId = sheet.drawing?.id?.toString() || ''
  
  // Extract format ID
  const formatId = sheet.format?.id?.toString() || ''
  
  formData.value = {
    code: sheet.code || '',
    name: sheet.name || '',
    formatType: sheet.formatType || '',
    creoId: sheet.creoId || '',
    drawingId: drawingId,
    modelIds: modelIds,
    formatId: formatId
  }
  
  console.log('[Sheets] Form data prepared for edit:', formData.value)
  showCreateModal.value = true
}

const confirmDelete = async (sheet: SheetWithRelations): Promise<void> => {
  const confirmed = confirm(t('sheets:confirmDelete', { name: sheet.name }))
  if (!confirmed) return
  
  loading.value = true
  try {
    const response = await sheets.delete(sheet.id || 0)
    if (response.success) {
      console.log('[Sheets] Sheet eliminato, aggiornamento dati...')
      await loadSheets()
      console.log(t('sheets:messages.deleteSuccess'))
    } else {
      error.value = response.error || 'Errore nella cancellazione'
    }
  } catch (err) {
    error.value = err instanceof Error ? err.message : 'Errore nella cancellazione'
  } finally {
    loading.value = false
  }
}

// Debug functions
const testBackend = async (): Promise<void> => {
  console.log('[Sheets] Testing backend connection...')
  debugInfo.value = 'Testing backend...'
  
  try {
    const result = await testBackendConnection()
    if (result.success) {
      debugInfo.value = `‚úÖ Backend OK - ${result.sheetsCount} sheets found`
      console.log('[Sheets] Backend test successful:', result)
      
      // If we got a token, try to use it to reload sheets
      if (result.token) {
        // Store the token temporarily and retry
        localStorage.setItem('test_token', result.token)
        await loadSheets()
      }
    } else {
      debugInfo.value = `‚ùå Backend Error: ${result.error}`
      console.error('[Sheets] Backend test failed:', result.error)
    }
  } catch (err) {
    debugInfo.value = `‚ùå Test failed: ${err}`
    console.error('[Sheets] Backend test error:', err)
  }
}

const forceLogin = async (): Promise<void> => {
  console.log('[Sheets] Forcing login with admin/admin...')
  debugInfo.value = 'Logging in...'
  
  try {
    const success = await login('admin', 'admin', false)
    if (success) {
      debugInfo.value = '‚úÖ Login successful'
      console.log('[Sheets] Force login successful')
      
      // Wait a bit for the token to be stored
      setTimeout(async () => {
        await loadSheets()
      }, 1000)
    } else {
      debugInfo.value = '‚ùå Login failed'
      console.error('[Sheets] Force login failed')
    }
  } catch (err) {
    debugInfo.value = `‚ùå Login error: ${err}`
    console.error('[Sheets] Force login error:', err)
  }
}

// Watchers per i filtri
watch([selectedFormat, selectedDrawing], () => {
  applyFilters()
})

// Lifecycle hooks
onMounted(async () => {
  console.log('[Sheets] Component mounted, loading translations...')
  
  try {
    // Load translations
    await loadNamespace('common')
    await loadNamespace('sheets')
    
    // Check auth status
    console.log('[Sheets] Auth status:', {
      isAuthenticated: isAuthenticated.value,
      user: user.value?.login
    })
    
    // Load data if authenticated and not already initialized
    if (isAuthenticated.value && !isInitialized.value) {
      await refreshData()
      isInitialized.value = true
    } else {
      console.log('[Sheets] Not authenticated or already initialized, skipping data load')
    }
    
  } catch (err) {
    console.error('[Sheets] Error in onMounted:', err)
  }
})

// SEO e Meta
useHead({
  title: computed(() => t('sheets:title') + ' - Dashboard'),
  meta: [
    { name: 'description', content: 'Gestione completa degli sheet CAD nel sistema JBelt' }
  ]
})
</script>

<style scoped>
.sheets-dashboard {
  padding: 1rem;
}

@media (max-width: 768px) {
  .sheets-dashboard {
    padding: 0.5rem;
  }
}
</style>