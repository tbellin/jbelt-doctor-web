# Integrated Docker Compose for JBelt Doctor Web + Backend
# This configuration runs both frontend (Nuxt) and backend (Spring Boot) together
name: jbelt-integrated

services:
  # Frontend Nuxt.js application
  jbelt-doctor-web:
    build:
      context: .
      dockerfile: Dockerfile
    image: jbelt-doctor-web:${JBELT_APP_VERSION:-1.0.0}
    container_name: jbelt-doctor-web
    working_dir: /usr/src/app

    volumes:
      - node_modules_volume:/usr/src/app/node_modules
    
    ports:
      - "3000:3000"

    environment:
      - HOST=0.0.0.0
      - NODE_ENV=${NODE_ENV:-development}
      # API integration with backend Spring Boot directly
      - NUXT_PUBLIC_API_BASE=http://app:8080
      - NUXT_PUBLIC_API_HOST=app
      - NUXT_PUBLIC_API_PORT=8080
      - NUXT_PUBLIC_FRONTEND_HOST=atlante.local
      - NUXT_PUBLIC_FRONTEND_PORT=3000
      - NUXT_DEBUG=${NUXT_DEBUG:-false}

    networks:
      - jbelt-network

    restart: unless-stopped
    
    # Wait for backend Spring Boot to be ready
    depends_on:
      app:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend services (from jbelt-map-srv configuration)
  # Nginx removed - using direct Spring Boot API access

  app:
    image: ${JBELT_APP_SPRING_NAME:-jbeltmapsrv}:${JBELT_APP_VERSION:-3.1.1}
    container_name: jbelt-backend
    environment:
      - _JAVA_OPTIONS=-Xmx512m -Xms256m
      - SPRING_PROFILES_ACTIVE=prod,api-docs
      - MANAGEMENT_PROMETHEUS_METRICS_EXPORT_ENABLED=true
      - SPRING_DATASOURCE_URL=${POSTGRES_URL:-jdbc:postgresql://postgresql:5432/}${POSTGRES_DB:-jbeltMapSrv}
      - SPRING_LIQUIBASE_URL=${POSTGRES_URL:-jdbc:postgresql://postgresql:5432/}${POSTGRES_DB:-jbeltMapSrv}
    volumes:
      - jbelt-map-data:/app/resources
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/management/health"]
      interval: 5s
      timeout: 5s
      retries: 40
      start_period: 60s
    depends_on:
      postgresql:
        condition: service_healthy
    networks:
      - jbelt-network

  postgresql:
    image: postgres:17.4
    container_name: jbelt-postgres
    volumes:
      - postgres-map-data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${POSTGRES_USERNAME:-jbeltMapSrv}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-jbeltMapSrv}
      - POSTGRES_DB=${POSTGRES_DB:-jbeltMapSrv}
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U $${POSTGRES_USER}']
      interval: 5s
      timeout: 5s
      retries: 10
    ports:
      - "5432:5432"
    networks:
      - jbelt-network

  pgadmin:
    image: dpage/pgadmin4:9.3
    container_name: jbelt-pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-info@ivytech.it}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin}
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=True
    expose:
      - "80"
    volumes:
      - pgadmin-map-data:/var/lib/pgadmin
    depends_on:
      postgresql:
        condition: service_healthy
    networks:
      - jbelt-network

volumes:
  # Frontend volumes
  node_modules_volume:
    name: jbelt-node-modules
  
  # Backend volumes (matching jbelt-map-srv)
  jbelt-map-data:
    name: jbelt-map-data
  postgres-map-data:
    name: postgres-map-data
  pgadmin-map-data:
    name: pgadmin-map-data

networks:
  jbelt-network:
    driver: bridge
    name: jbelt-network